/* Generated By:JJTree&JavaCC: Do not edit this line. IdIndexer.java */
package com.wanhive.basic.indexer;

import java.io.*;
import java.util.*;
@SuppressWarnings("all")
public class IdIndexer/* @bgen(jjtree) */implements IdIndexerTreeConstants,
		IdIndexerConstants {/* @bgen(jjtree) */

	public static synchronized ArrayList<String> getChapterNumber(InputStream in) {
		// Initialize only once
		initializeIndexer();
		ReInit(in);
		ArrayList<String> al = new ArrayList<String>();
		try {
			al = start(System.out);

		} catch (Exception e) {
			System.out.println("PARSE ERROR: " + e.getMessage());
		} catch (TokenMgrError e) {
			System.out.println("SYNTAX ERROR: " + e.getMessage());
		}
		return al;
	}

	private static void initializeIndexer() {
		if (!isInitialized)
			new IdIndexer(System.in);
		isInitialized = true;
	}

	private static boolean isInitialized = false;

	protected static JJTIdIndexerState jjtree = new JJTIdIndexerState();

	public static void main(String args[]) {
		System.out.println("Reading from standard input...");
		System.out
				.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
		new IdIndexer(System.in);
		try {
			ArrayList<String> al = IdIndexer.start(System.out);
			System.out.println("Thank you.");
			for (int i = 0; i < al.size(); i++) {
				System.out.println("$$" + al.get(i));
			}

		} catch (Exception e) {
			System.out.println("PARSE ERROR: " + e.getMessage());
		} catch (TokenMgrError e) {
			System.out.println("SYNTAX ERROR: " + e.getMessage());
		}
	}

	/* ============================================================= */
	/* PARSER */
	/* ============================================================= */
	static final public ArrayList<String> start(PrintStream out)
			throws ParseException {
		/* @bgen(jjtree) Start */
		SimpleNode jjtn000 = new SimpleNode(JJTSTART);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		ArrayList<String> al = new ArrayList<String>();
		String s;
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case INTIGER_LITERAL:
				s = constant();
				al.add(s);
				label_1: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case INTIGER_LITERAL:
					case IDENTIFIER:
						;
						break;
					default:
						jj_la1[0] = jj_gen;
						break label_1;
					}
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case INTIGER_LITERAL:
						s = constant();
						al.add(s);
						break;
					case IDENTIFIER:
						jj_consume_token(IDENTIFIER);
						break;
					default:
						jj_la1[1] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
				jj_consume_token(SC);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true)
						return al;
				}
				break;
			case IDENTIFIER:
				jj_consume_token(IDENTIFIER);
				label_2: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case INTIGER_LITERAL:
					case IDENTIFIER:
						;
						break;
					default:
						jj_la1[2] = jj_gen;
						break label_2;
					}
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case IDENTIFIER:
						jj_consume_token(IDENTIFIER);
						break;
					case INTIGER_LITERAL:
						constant();
						break;
					default:
						jj_la1[3] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
				jj_consume_token(SC);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true)
						return al;
				}
				break;
			default:
				jj_la1[4] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public String constant() throws ParseException {
		/* @bgen(jjtree) Constant */
		SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(INTIGER_LITERAL);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true)
					return t.image;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public IdIndexerTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private int jj_ntk;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[5];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0xc, 0xc, 0xc, 0xc, 0xc, };
	}

	/** Constructor with InputStream. */
	public IdIndexer(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public IdIndexer(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out
					.println("ERROR: Second call to constructor of static parser.  ");
			System.out
					.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new IdIndexerTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public IdIndexer(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out
					.println("ERROR: Second call to constructor of static parser. ");
			System.out
					.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new IdIndexerTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public IdIndexer(IdIndexerTokenManager tm) {
		if (jj_initialized_once) {
			System.out
					.println("ERROR: Second call to constructor of static parser. ");
			System.out
					.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(IdIndexerTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;

	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[6];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 5; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 6; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	static final public void enable_tracing() {
	}

	/** Disable tracing. */
	static final public void disable_tracing() {
	}

}
