/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. IdIndexer.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  static = true;
}

PARSER_BEGIN(IdIndexer)
package com.wanhive.basic.indexer;

import java.io.*;
import java.util.*;
public class IdIndexer/*@bgen(jjtree)*/implements IdIndexerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTIdIndexerState jjtree = new JJTIdIndexerState();

/*@egen*/
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new IdIndexer(System.in);
    try {
      ArrayList<String> al= IdIndexer.start(System.out);
      System.out.println("Thank you.");
      for(int i=0;i<al.size();i++)
      {
      	System.out.println("$$"+al.get(i));
      }
      
    } catch (Exception e) {
      System.out.println("PARSE ERROR: "+e.getMessage());
    }
    catch (TokenMgrError e) {
      System.out.println("SYNTAX ERROR: "+e.getMessage());
    }
  }
}

PARSER_END(IdIndexer)

/***********************************************/
/*
 * LEXER SPEC
*/

SKIP:
{
< ~["0"-"9", ";", "_", "-", "a"-"z", "A"-"Z"]>
}

TOKEN:  /* NUMBER: Basic Integer Type */
{
	<INTIGER_LITERAL: (<DIGIT>)+>
}

TOKEN:
{
	<IDENTIFIER: (["_","-","a"-"z","A"-"Z"])+>
}

TOKEN:
{
	<SC: ";">
}

TOKEN:
{
	<#DIGIT: ["0"-"9"]>
}
/*=============================================================*/
/*                           PARSER                            */
/*=============================================================*/

ArrayList<String> start(PrintStream out)       :
{/*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ArrayList<String> al=new ArrayList<String>();
	String s;
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(s=constant() {al.add(s);}) ((s=constant() {al.add(s);} | <IDENTIFIER>))*<SC>/*@bgen(jjtree)*/
                                                                                      {
                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                        jjtc000 = false;
                                                                                      }
/*@egen*/ {return al;}
	|
	<IDENTIFIER> (<IDENTIFIER> | constant())* <SC>/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ {return al;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String constant()          :
{/*@bgen(jjtree) Constant */
        SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
	(t=<INTIGER_LITERAL> /*| t=<IDENTIFIER>*/)/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/{return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}