/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. arith.jj */
/*@egen*/options{  JDK_VERSION = "1.6";  static = true;}PARSER_BEGIN(Parser)package com.wanhive.basic.arithexp;import java.util.*;
import java.io.*;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new Parser(System.in);    try    {      SimpleNode n = Parser.start(System.out);      n.dump("");      System.out.println("Thank you.");    }    catch(ParseException e)
	{
		System.out.println("PARSE ERROR: "+e.getMessage());
	}
	catch(TokenMgrError e)
	{
		System.out.println("SYNTAX ERROR: "+e.getMessage());
	}
	catch(NumberFormatException e)
	{
		System.out.println("NAN: "+e.getMessage());
	}
	catch(Exception e)
	{
	  	System.out.println("EXCEPTION: "+e.getMessage());
	}  }
  static double last_result=0.0;}PARSER_END(Parser)

// START: LEXER SPEC

/* Always Skip */
SKIP:
{
  " " | "\t" | "\r" | "\f" | "\n"
}

/* Comments */
SPECIAL_TOKEN:
{
	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

/* Separators */
TOKEN:
{<SC: ";">}

/* Delimiters */
TOKEN:
{
	<LP: "(">
	|
	<RP: ")">
}

/* Literals */
TOKEN:
{<NUMBER: (<DIGITS>)+ | (<DIGITS>)*"."(<DIGITS>)+>}
TOKEN:
{<#DIGITS: ["0"-"9"]>}

/* Operators */
TOKEN:
{
	<PLUS: "+">
	|
	<MINUS: "-">
	|
	<MULT: "*">
	|
	<DIV: "/">
}

/* Helper Tokens */
TOKEN:
{<MEM: "$">}
TOKEN:
{<QUOTE: "'"> | <DQUOTE: "\"">}
TOKEN:
{<QUIT: "q">}

//END: LEXER SPEC

SimpleNode start(PrintStream out)  throws NumberFormatException:{/*@bgen(jjtree) start */
 SimpleNode jjtn000 = new SimpleNode(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/double result;}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  result=expression() <SC>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		out.println(result);
		System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
		return jjtn000;
	}
	|
	<QUIT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		System.out.println("Exiting...");
		return null;
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof NumberFormatException) {
      throw (NumberFormatException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

double expression() throws NumberFormatException         :
{/*@bgen(jjtree) #Add(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTADD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	double result;
	double temp;
	//Token t;
}
{/*@bgen(jjtree) #Add(> 1) */
        try {
/*@egen*/
	result=term()
	(
	<PLUS> temp=term() {result+=temp;}
	|
	<MINUS> temp=term(){result-=temp;}
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          jjtc000 = false;
        }
/*@egen*/
	{
		Parser.last_result=result;
		return result;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            throw (NumberFormatException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}
double term() throws NumberFormatException          :
{/*@bgen(jjtree) #Mult(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTMULT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	double result;
	double temp;
	//Token t;
}
{/*@bgen(jjtree) #Mult(> 1) */
        try {
/*@egen*/
	result=factor()
	(
	<MULT> temp=factor() {result*=temp;}
	|
	<DIV> temp=factor() {result/=temp;}
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          jjtc000 = false;
        }
/*@egen*/
	{return result;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            throw (NumberFormatException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

double factor() throws NumberFormatException        :
{/*@bgen(jjtree) Factor */
        SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	double result;
}
{/*@bgen(jjtree) Factor */
        try {
/*@egen*/
	result=number()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return result;}
	|
	<MEM>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {return Parser.last_result;}
	|
	<LP> result=expression() <RP>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {return result;}
	|
	<MINUS> result=factor()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {return -result;}
	|
	<PLUS> result=factor()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {return result;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            throw (NumberFormatException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

double number() throws NumberFormatException:
{/*@bgen(jjtree) number */
        SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	//Token t;
	double result=0;
	double temp=0;
}
{/*@bgen(jjtree) number */
        try {
/*@egen*/
	LOOKAHEAD(3) result=ISnumber() <QUOTE>[temp=ISnumber() <DQUOTE>]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return (result*12+temp)*0.0254;}
	|
	LOOKAHEAD(2) temp=ISnumber()<DQUOTE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return temp*0.0254;}
	|
	result=ISnumber()/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {return result;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            throw (NumberFormatException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

double ISnumber() throws NumberFormatException:
{/*@bgen(jjtree) ISnumber */
        SimpleNode jjtn000 = new SimpleNode(JJTISNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	double result;
}
{/*@bgen(jjtree) ISnumber */
        try {
/*@egen*/
	t=<NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		result=Double.parseDouble(t.image);
		System.out.println("Found: "+result);
		return result;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
